{"version":3,"sources":["reusable/DocsLink.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/notifications/alerts/Alerts.js"],"names":["DocsLink","props","name","text","rest","href","className","rel","target","React","memo","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","Alerts","useState","visible","setVisible","xs","md","color","closeButton","show","onShowChange","striped","Number","size","onClick"],"mappings":"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","file":"static/js/22.4cba0da0.chunk.js","sourcesContent":["import React from 'react'\r\nimport { CLink } from '@coreui/react'\r\n\r\nconst DocsLink = props => {\r\n  const {\r\n    name,\r\n    text,\r\n    ...rest\r\n  } = props\r\n\r\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\r\n\r\n  return (\r\n    <div className=\"card-header-actions\">\r\n      <CLink \r\n        {...rest}\r\n        href={href}\r\n        rel=\"noreferrer noopener\" \r\n        target=\"_blank\" \r\n        className=\"card-header-action\"  \r\n      >\r\n        <small className=\"text-muted\">{ text || 'docs' }</small>\r\n      </CLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(DocsLink)","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react'\r\nimport {\r\n  CAlert,\r\n  CButton,\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCol,\r\n  CLink,\r\n  CProgress,\r\n  CRow\r\n} from '@coreui/react'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst Alerts = () => {\r\n  const [visible, setVisible] = React.useState(10)\r\n\r\n  return (\r\n    <>\r\n      <CRow>\r\n        <CCol xs=\"12\" md=\"6\">\r\n          <CCard>\r\n            <CCardHeader>\r\n              Alerts\r\n              <DocsLink name=\"CAlert\"/>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CAlert color=\"primary\">\r\n                This is a primary alert — check it out!\r\n              </CAlert>\r\n              <CAlert color=\"secondary\">\r\n                This is a secondary alert — check it out!\r\n              </CAlert>\r\n              <CAlert color=\"success\">\r\n                This is a success alert — check it out!\r\n              </CAlert>\r\n              <CAlert color=\"danger\">\r\n                This is a danger alert — check it out!\r\n              </CAlert>\r\n              <CAlert color=\"warning\">\r\n                This is a warning alert — check it out!\r\n              </CAlert>\r\n              <CAlert color=\"info\">\r\n                This is a info alert — check it out!\r\n              </CAlert>\r\n              <CAlert color=\"light\">\r\n                This is a light alert — check it out!\r\n              </CAlert>\r\n              <CAlert color=\"dark\">\r\n                This is a dark alert — check it out!\r\n              </CAlert>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs=\"12\" md=\"6\">\r\n          <CCard>\r\n            <CCardHeader>\r\n              Alerts\r\n              <small> use <code>.alert-link</code> to provide links</small>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CAlert color=\"primary\">\r\n                {/*eslint-disable-next-line*/}\r\n                This is a primary alert with&nbsp;\r\n                <CLink className=\"alert-link\">an example link</CLink>.\r\n                Give it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"secondary\">\r\n                {/*eslint-disable-next-line*/}\r\n                This is a secondary alert with&nbsp;\r\n                <CLink className=\"alert-link\">an example link</CLink>.\r\n                Give it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"success\">\r\n                {/*eslint-disable-next-line*/}\r\n                This is a success alert with&nbsp;\r\n                <CLink className=\"alert-link\">an example link</CLink>.\r\n                Give it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"danger\">\r\n                {/*eslint-disable-next-line*/}\r\n                This is a danger alert with&nbsp;\r\n                <CLink className=\"alert-link\">an example link</CLink>.\r\n                Give it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"warning\">\r\n                {/*eslint-disable-next-line*/}\r\n                This is a warning alert with&nbsp;\r\n                <CLink className=\"alert-link\">an example link</CLink>.\r\n                Give it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"info\">\r\n                {/*eslint-disable-next-line*/}\r\n                This is a info alert with&nbsp;\r\n                <CLink className=\"alert-link\">an example link</CLink>.\r\n                Give it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"light\">\r\n                {/*eslint-disable-next-line*/}\r\n                This is a light alert with&nbsp;\r\n                <CLink className=\"alert-link\">an example link</CLink>.\r\n                Give it a click if you like.\r\n              </CAlert>\r\n              <CAlert color=\"dark\">\r\n                {/*eslint-disable-next-line*/}\r\n                This is a dark alert with&nbsp;\r\n                <CLink className=\"alert-link\">an example link</CLink>.\r\n                Give it a click if you like.\r\n              </CAlert>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n      <CRow>\r\n        <CCol xs=\"12\" md=\"6\">\r\n          <CCard>\r\n            <CCardHeader>\r\n              Alerts\r\n              <small> additional content</small>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CAlert color=\"success\">\r\n                <h4 className=\"alert-heading\">Well done!</h4>\r\n                <p>\r\n                  Aww yeah, you successfully read this important alert message. This example text is going\r\n                  to run a bit longer so that you can see how spacing within an alert works with this kind\r\n                  of content.\r\n                </p>\r\n                <hr />\r\n                <p className=\"mb-0\">\r\n                  Whenever you need to, be sure to use margin utilities to keep things nice and tidy.\r\n                </p>\r\n              </CAlert>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n        <CCol xs=\"12\" md=\"6\">\r\n          <CCard>\r\n            <CCardHeader>\r\n              Alerts\r\n              <small> dismissing</small>\r\n            </CCardHeader>\r\n            <CCardBody>\r\n              <CAlert\r\n                color=\"info\"\r\n                closeButton\r\n              >\r\n                I am an dismissible alert!\r\n              </CAlert>\r\n              <CAlert\r\n                color=\"warning\"\r\n                show={visible}\r\n                closeButton\r\n                onShowChange={setVisible}\r\n              >\r\n                I will be closed in {visible} seconds!\r\n                <CProgress\r\n                  striped\r\n                  color=\"warning\"\r\n                  value={Number(visible) * 10}\r\n                  size=\"xs\"\r\n                  className=\"mb-3\"\r\n                />\r\n              </CAlert>\r\n\r\n              <CButton color=\"primary\" onClick={() => setVisible(10)}>\r\n                Reset timer\r\n              </CButton>\r\n            </CCardBody>\r\n          </CCard>\r\n        </CCol>\r\n      </CRow>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Alerts\r\n"],"sourceRoot":""}