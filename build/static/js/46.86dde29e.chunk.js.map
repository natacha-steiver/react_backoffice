{"version":3,"sources":["_components/_crudPage/text.js","_components/Form/TextAddForm.js","_pages/TextAddPage.js","views/backoffice/texts/Texts.js"],"names":["styles","borderBottom","background","margin","padding","borderRadius","Text","text","titre","contenu","page","id","pages","dispatch","useState","titreNew","setTitre","contenuNew","setContenu","pageNew","setpage","showNew","setShow","setTimeout","style","className","htmlFor","type","name","placeholder","onChange","event","target","value","parseInt","map","index","marginRight","onClick","deleteTexts","updateTexts","TextAddForm","useDispatch","texts","useSelector","state","clickNew","setClick","useEffect","e","fetchAllTexts","fetchAllpages","marginTop","paddingTop","boxShadow","textAlign","color","fontWeight","fontSize","paddingBottom","clear","initialValues","validationSchema","Yup","trim","matches","message","required","min","onSubmit","values","setSubmitting","createTexts","props","as","idx","selected","display","console","log","length","TextAddPage","Texts","href"],"mappings":"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","file":"static/js/46.86dde29e.chunk.js","sourcesContent":["\r\nimport  { React,useState,useEffect }  from 'react';\r\n\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport {updateTexts,deleteTexts,fetchAllTexts,fetchAllpages} from '../../_actions/crudActions';\r\nimport \"./scss/form.scss\";\r\nconst styles = {\r\n  borderBottom: '2px solid #eee',\r\n  background: '#fafafa',\r\n  margin: '.75rem auto',\r\n  padding: '.6rem 1rem',\r\n  //maxWidth: '90%',\r\n  borderRadius: '7px'\r\n};\r\n\r\nexport const Text=({ text: { titre,contenu, page,id },pages, dispatch }) => {\r\n\r\n  const [titreNew, setTitre] = useState('');\r\n  const [contenuNew, setContenu] = useState('');\r\n  const [pageNew, setpage] = useState(page);\r\n  const [showNew, setShow] = useState(false);\r\n\r\n  setTimeout(()=>{\r\n     setShow(true);\r\n  },1700)\r\n\r\n  return (\r\n    showNew && <div style={ styles } className=\"container\">\r\n{      /*<h2>{ name }</h2>\r\n      <p>{ contenu }</p>\r\n  <p>page: { page }</p>\r\n*/}\r\n\r\n      <form className=\"container col-lg-12 justify-content-center\">\r\n      <div className=\"form-group  col-lg-4 d-xs-block d-md-inline-block group-align\" >\r\n      <label htmlFor=\"titre\" className=\"label-row \">Titre:</label>\r\n      <input type=\"text\" name=\"titre\"  placeholder={titre}  onChange={event => setTitre(event.target.value)}/>\r\n      </div>\r\n\r\n      <div className=\"form-group col-lg-4 d-xs-block d-md-inline-block group-align\" >\r\n      <label htmlFor=\"contenu\" className=\"label-row\">contenu:</label>\r\n      <input type=\"text\" name=\"contenu\"  placeholder={contenu}    onChange={event => setContenu(event.target.value)}/>\r\n\r\n      </div>\r\n\r\n      <div className=\"form-group  col-lg-4 d-xs-block d-md-inline-block group-align\" >\r\n      <label htmlFor=\"\" className=\"label-row\">page:</label>\r\n      {/*faire un select puis renvoy√© id du page*/}\r\n\r\n      <select id=\"page_select\" name=\"page\"  onChange={event => setpage(parseInt(event.target.value))} page={pageNew}  value={pageNew}>\r\n      {\r\n\r\n\r\n        pages!=null && pages.map((page,index )=> {\r\n          return (\r\n            <option value={page.id} key={page.id}>{page.name}</option>\r\n\r\n          );\r\n        })\r\n\r\n  }\r\n\r\n\r\n      </select>\r\n\r\n      </div>\r\n\r\n\r\n      </form>\r\n\r\n\r\n      <button style={{marginRight:\"1em\"}} className=\"btn btn-danger\" type=\"button\" onClick={() =>{ dispatch(deleteTexts(id))\r\n\r\n      }} >\r\n        Remove\r\n      </button>\r\n\r\n\r\n      <button className=\"btn btn-success\" type=\"button\" onClick={() =>\r\n    {    dispatch(updateTexts(id,pageNew,titreNew,contenuNew))\r\n      //issue update stop fetch data so add this below\r\n\r\n    }\r\n        } >\r\n        Update\r\n      </button>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n","import {React,useEffect,useState} from 'react';\r\nimport { Formik, Field, Form, ErrorMessage, getIn } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\nimport {Text} from \"../_crudPage/text\";\r\nimport { createTexts,fetchAllpages,fetchAllTexts,updateTexts,deleteTexts} from '../../_actions/crudActions';\r\nimport {PageLoop} from \"../_crudPage/text_page_loop\";\r\n\r\nconst TextAddForm = () => {\r\n    const dispatch = useDispatch();\r\n    const texts = useSelector(state => state.texts);\r\n    const pages = useSelector(state => state.pages);\r\n    const [pageNew, setpage] = useState(pages);\r\n    const [clickNew, setClick] = useState(false);\r\n    const [showNew, setShow] = useState(false);\r\n\r\n    function getStyles(errors, fieldName) {\r\n        if (getIn(errors, fieldName)) {\r\n            return {\r\n            border: '1px solid red',\r\n            color: 'red',\r\n            }\r\n        }\r\n    }\r\n    const triggerClick =e=>{\r\n    setClick(true);\r\n\r\n          dispatch(fetchAllTexts());\r\n          dispatch(fetchAllpages());\r\n\r\n      }\r\n      setTimeout(()=>{\r\n         setShow(true);\r\n      },1700);\r\n\r\n     useEffect((e) => {\r\n         triggerClick();\r\n         setClick(false);\r\n\r\n\r\n\r\n       },[clickNew]);\r\n\r\n    return (\r\n        <section id=\"textAddForm\" className=\"app-about-section angle-sp\" style={{marginTop:\"20px\", paddingTop: '0'}}>\r\n            <div className=\"container\">\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-12\" >\r\n                        <div className=\"col-md-12 col-lg-12\" style={{background: `#ffffff none repeat scroll 0 0`, boxShadow: '0 0 5px rgba(0, 0, 0, 0.2)',padding: \"30px\"}}>\r\n                        <p><span className=\"doubleLine-title\" style={{textAlign:\"left\", color:\"#ff063c\", fontWeight:\"300\", fontSize:\"2em\", paddingBottom: '30px'}}>Texts</span><span style={{clear:'both'}}></span></p>\r\n                            <Formik\r\n                                initialValues={{titre: '', contenu: '',page:''}}\r\n                                validationSchema={Yup.object({\r\n                                  titre: Yup.string()\r\n                                        .trim()\r\n                                        .matches(/^[A-Za-z- ]+$/, { message: <p className=\"errorMessage\">Please only type in letters, white spaces and \"-\"</p> })\r\n                                        // .max(15, 'Must be 15 characters or less')\r\n                                        .required(<p className=\"errorMessage\">This field is required</p>),\r\n                                    contenu: Yup.string()\r\n                                        .trim()\r\n                                        // .max(20, 'Must be 20 characters or less')\r\n                                        .matches(/^[A-Za-z- ]+$/, { message: <p className=\"errorMessage\">Please only type in letters, white spaces and \"-\"</p> })\r\n                                        .required(<p className=\"errorMessage\">Required</p>),\r\n                                    page: Yup.number()\r\n                                    .min(1,<p className=\"errorMessage\">error</p>)\r\n                                    .required(<p className=\"errorMessage\">This field is required</p>),\r\n\r\n\r\n\r\n\r\n\r\n                                })}\r\n                            onSubmit={(values, { setSubmitting }) => {\r\n\r\n                                    dispatch(createTexts(values));\r\n                            }}\r\n                            >\r\n                                {(props) =>\r\n                                    <Form className=\"col-lg-12 justify-content-center\">\r\n                                        {/* <div className=\"col-lg-12\"> */}\r\n                                        <div className=\"form-group col-lg-6 d-md-inline-block\" style={{ color:\"#3d009e\" }}>\r\n                                            <label htmlFor=\"titre\">Titre</label>\r\n                                            <Field name=\"titre\" type=\"text\" className=\"form-control\" />\r\n                                            <ErrorMessage name=\"titre\" />\r\n                                        </div>\r\n                                        <div className=\"form-group col-lg-6 d-md-inline-block\" style={{ color:\"#3d009e\" }}>\r\n                                            <label htmlFor=\"contenu\">contenu</label>\r\n                                            <Field name=\"contenu\" type=\"text\" className=\"form-control\" />\r\n                                            <ErrorMessage name=\"contenu\" />\r\n                                        </div>\r\n\r\n                                        <div className=\"form-group col-lg-6\" style={{ color:\"#3d009e\" }}>\r\n                                        <label htmlFor=\"\" className=\"label-row\">page:</label>\r\n                                        {/*faire un select puis renvoy√© id du Page*/}\r\n\r\n                                        <Field as=\"select\" name=\"page\" className=\"form-control\">\r\n\r\n                                                  {pages.map((pages,idx) => {\r\n                                                      return (<option\r\n                                                          selected\r\n                                                          value={parseInt(pages.id)}\r\n                                                          key={idx}\r\n                                                      >\r\n                                                          {pages.name}\r\n                                                      </option>\r\n                                                      );\r\n                                                  })}\r\n                                              </Field>\r\n                                              <ErrorMessage name=\"page\" />\r\n\r\n                                        </div>\r\n\r\n                                        <button className=\"btn btn-primary d-block\"  style={{margin:\"1em auto\"}} type=\"submit\">add text</button>\r\n\r\n                                    </Form>\r\n                                }\r\n                            </Formik>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n          {  showNew==true && <div>\r\n\r\n            <button style={{display:\"none\"}}className=\"btn btn-primary\" onClick={()=>{\r\n              dispatch(fetchAllTexts());\r\n\r\n            }}>voir</button>\r\n\r\n\r\n            {\r\n\r\n\r\n           typeof(pages)==\"undefined\"?console.log(\"error\"):\r\n          texts.length>0 && texts.map((text,index )=> {\r\n            return (\r\n\r\n              <Text text={text} pages={pages}  key={index} dispatch={dispatch} />\r\n\r\n            );\r\n          })\r\n\r\n\r\n        }\r\n\r\n\r\n            </div>}\r\n        </section>\r\n\r\n   );\r\n};\r\n\r\nexport default TextAddForm;\r\n","import React,{ useState,useEffect } from 'react';\r\n\r\nimport TextAddForm from '../_components/Form/TextAddForm';\r\nimport { useDispatch,useSelector } from 'react-redux';\r\n\r\nimport { history } from '../_helpers/history';\r\n//import classes from './RegisterPage.module.scss';\r\n\r\nconst TextAddPage = (props) => {\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n            <TextAddForm />\r\n\r\n    );\r\n}\r\n\r\nexport default TextAddPage;\r\n","import React, { useEffect, useState, createRef } from 'react'\r\nimport classNames from 'classnames'\r\nimport {\r\n  CRow,\r\n  CCol,\r\n  CCard,\r\n  CCardHeader,\r\n  CCardBody\r\n} from '@coreui/react'\r\nimport { rgbToHex } from '@coreui/utils'\r\nimport { DocsLink } from 'src/reusable'\r\nimport TextAddPage from \"../../../_pages/TextAddPage\"\r\n\r\nconst ThemeView = () => {\r\n  const [color, setColor] = useState('rgb(255, 255, 255)')\r\n  const ref = createRef()\r\n\r\n  useEffect(() => {\r\n    const el = ref.current.parentNode.firstChild\r\n    const varColor = window.getComputedStyle(el).getPropertyValue('background-color')\r\n    setColor(varColor)\r\n  }, [ref])\r\n\r\n  return (\r\n    <table className=\"table w-100\" ref={ref}>\r\n      <tbody>\r\n      <tr>\r\n        <td className=\"text-muted\">HEX:</td>\r\n        <td className=\"font-weight-bold\">{ rgbToHex(color) }</td>\r\n      </tr>\r\n      <tr>\r\n        <td className=\"text-muted\">RGB:</td>\r\n        <td className=\"font-weight-bold\">{ color }</td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nconst ThemeColor = ({className, children}) => {\r\n  const classes = classNames(className, 'theme-color w-75 rounded mb-3')\r\n  return (\r\n    <CCol xl=\"2\" md=\"4\" sm=\"6\" xs=\"12\" className=\"mb-4\">\r\n      <div className={classes} style={{paddingTop: '75%'}}></div>\r\n      {children}\r\n      <ThemeView/>\r\n    </CCol>\r\n  )\r\n}\r\n\r\nconst Texts = () => {\r\n  return (\r\n    <>\r\n      <CCard>\r\n        <CCardHeader>\r\n          Texts - gestion\r\n          <DocsLink href=\"https://coreui.io/docs/utilities/colors/\"/>\r\n        </CCardHeader>\r\n        <TextAddPage/>\r\n      </CCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Texts\r\n"],"sourceRoot":""}