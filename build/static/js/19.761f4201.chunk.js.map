{"version":3,"sources":["reusable/DocsLink.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/base/navbars/Navbars.js"],"names":["DocsLink","props","name","text","rest","href","className","rel","target","React","memo","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","CNavbars","useState","isOpen","setIsOpen","isOpenDropdown","setIsOpenDropdown","navbarText","setNavbarText","expandable","color","inNavbar","onClick","show","navbar","inline","placeholder","size","type","inNav","light","src","alt","toggleable"],"mappings":"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","file":"static/js/19.761f4201.chunk.js","sourcesContent":["import React from 'react'\r\nimport { CLink } from '@coreui/react'\r\n\r\nconst DocsLink = props => {\r\n  const {\r\n    name,\r\n    text,\r\n    ...rest\r\n  } = props\r\n\r\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\r\n\r\n  return (\r\n    <div className=\"card-header-actions\">\r\n      <CLink \r\n        {...rest}\r\n        href={href}\r\n        rel=\"noreferrer noopener\" \r\n        target=\"_blank\" \r\n        className=\"card-header-action\"  \r\n      >\r\n        <small className=\"text-muted\">{ text || 'docs' }</small>\r\n      </CLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(DocsLink)","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState } from 'react'\r\nimport {\r\n  CCard,\r\n  CCardBody,\r\n  CCardHeader,\r\n  CCollapse,\r\n  CDropdownItem,\r\n  CDropdownMenu,\r\n  CDropdownToggle,\r\n  CNavbar,\r\n  CNavbarNav,\r\n  CNavbarBrand,\r\n  CNavbarText,\r\n  CToggler,\r\n  CNavLink,\r\n  CDropdown,\r\n  CForm,\r\n  CInput,\r\n  CButton,\r\n  CImg\r\n} from '@coreui/react'\r\nimport { DocsLink } from 'src/reusable'\r\n\r\nconst CNavbars = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [isOpenDropdown, setIsOpenDropdown] = useState(false)\r\n  const [navbarText, setNavbarText] = useState(false)\r\n\r\n  return (\r\n    <>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          CNavbar\r\n          <DocsLink name=\"CNavbar\"/>\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CNavbar expandable=\"sm\" color=\"info\" >\r\n            <CToggler inNavbar onClick={() => setIsOpen(!isOpen)}/>\r\n            <CNavbarBrand>\r\n              NavbarBrand\r\n            </CNavbarBrand>\r\n            <CCollapse show={isOpen} navbar>\r\n              <CNavbarNav>\r\n                <CNavLink>Home</CNavLink>\r\n                <CNavLink>Link</CNavLink>\r\n              </CNavbarNav>\r\n              <CNavbarNav className=\"ml-auto\">\r\n                <CForm inline>\r\n                  <CInput\r\n                    className=\"mr-sm-2\"\r\n                    placeholder=\"Search\"\r\n                    size=\"sm\"\r\n                  />\r\n                  <CButton color=\"light\" className=\"my-2 my-sm-0\" type=\"submit\">Search</CButton>\r\n                </CForm>\r\n                <CDropdown\r\n                  inNav\r\n                >\r\n                  <CDropdownToggle color=\"primary\">\r\n                    Lang\r\n                  </CDropdownToggle>\r\n                  <CDropdownMenu>\r\n                    <CDropdownItem>EN</CDropdownItem>\r\n                    <CDropdownItem>ES</CDropdownItem>\r\n                    <CDropdownItem>RU</CDropdownItem>\r\n                    <CDropdownItem>FA</CDropdownItem>\r\n                  </CDropdownMenu>\r\n                </CDropdown>\r\n                <CDropdown\r\n                  inNav\r\n                >\r\n                  <CDropdownToggle color=\"primary\">\r\n                    User\r\n                  </CDropdownToggle>\r\n                  <CDropdownMenu>\r\n                    <CDropdownItem>Account</CDropdownItem>\r\n                    <CDropdownItem>Settings</CDropdownItem>\r\n                  </CDropdownMenu>\r\n                </CDropdown>\r\n              </CNavbarNav>\r\n            </CCollapse>\r\n          </CNavbar>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          CNavbar brand\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CNavbar color=\"faded\" light>\r\n            <CNavbarBrand>\r\n              <CImg\r\n                src=\"https://placekitten.com/g/30/30\"\r\n                className=\"d-inline-block align-top\"\r\n                alt=\"CoreuiVue\"\r\n              />\r\n              CoreUI React\r\n            </CNavbarBrand>\r\n          </CNavbar>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          CNavbar text\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CNavbar toggleable=\"sm\" light color=\"light\">\r\n            <CToggler\r\n              inNavbar\r\n              onClick={()=>{ setNavbarText(!navbarText)}}\r\n            />\r\n            <CNavbarBrand>NavbarBrand</CNavbarBrand>\r\n            <CCollapse show={navbarText}>\r\n              <CNavbarNav>\r\n                <CNavbarText>Navbar text</CNavbarText>\r\n              </CNavbarNav>\r\n            </CCollapse>\r\n          </CNavbar>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          CNavbar dropdown\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CNavbar expandable=\"false\" color=\"primary\" >\r\n            <CToggler inNavbar onClick={()=>{setIsOpenDropdown(!isOpenDropdown)}} />\r\n            <CCollapse show={isOpenDropdown} navbar>\r\n              <CNavbarNav>\r\n                <CNavLink>Home</CNavLink>\r\n                <CNavLink>Link</CNavLink>\r\n                <CDropdown\r\n                  inNav\r\n                >\r\n                  <CDropdownToggle color=\"primary\">\r\n                    Lang\r\n                  </CDropdownToggle>\r\n                  <CDropdownMenu>\r\n                    <CDropdownItem>EN</CDropdownItem>\r\n                    <CDropdownItem>ES</CDropdownItem>\r\n                    <CDropdownItem>RU</CDropdownItem>\r\n                    <CDropdownItem>FA</CDropdownItem>\r\n                  </CDropdownMenu>\r\n                </CDropdown>\r\n                <CDropdown\r\n                  inNav\r\n                >\r\n                  <CDropdownToggle color=\"primary\">\r\n                    User\r\n                  </CDropdownToggle>\r\n                  <CDropdownMenu>\r\n                    <CDropdownItem>Account</CDropdownItem>\r\n                    <CDropdownItem>Settings</CDropdownItem>\r\n                  </CDropdownMenu>\r\n                </CDropdown>\r\n              </CNavbarNav>\r\n            </CCollapse>\r\n          </CNavbar>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          CNavbar form\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CNavbar light color=\"light\">\r\n            <CForm inline>\r\n              <CInput\r\n                className=\"mr-sm-2\"\r\n                placeholder=\"Search\"\r\n                size=\"sm\"\r\n              />\r\n              <CButton color=\"outline-success\" className=\"my-2 my-sm-0\" type=\"submit\">Search</CButton>\r\n            </CForm>\r\n          </CNavbar>\r\n        </CCardBody>\r\n      </CCard>\r\n\r\n      <CCard>\r\n        <CCardHeader>\r\n          CNavbar input group\r\n        </CCardHeader>\r\n        <CCardBody>\r\n          <CNavbar light color=\"light\">\r\n            <CForm inline>\r\n              <CInput\r\n                className=\"mr-sm-2\"\r\n                placeholder=\"Username\"\r\n              />\r\n            </CForm>\r\n          </CNavbar>\r\n        </CCardBody>\r\n      </CCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CNavbars\r\n"],"sourceRoot":""}